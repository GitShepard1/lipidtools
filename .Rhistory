xaxis_order = groupsum %>%
dplyr::select(TREATMENT, REGION) %>%
arrange(match(REGION,  region_order),
match(TREATMENT, object@treatments)) %>%
dplyr::mutate(treat = paste(REGION, TREATMENT, sep ='\n')) %>%
pull(treat) %>%
unique
# then
if (statistic == 'response') {
groupsum = groupsum %>%
select(REGION, TREATMENT, FILL_BY, mean_sum, ORDER) %>%
spread(TREATMENT, mean_sum) %>%
dplyr::mutate(diff = get(object@treatments[1]) - get(object@treatments[2]))
} else if (statistic == 'percentage') {
groupsum = groupsum %>%
dplyr::select(REGION, TREATMENT, FILL_BY, percent, treat, ORDER)
} else if (statistic == 'means +/- se'){
groupsum = groupsum %>%
dplyr::select(REGION, TREATMENT, FILL_BY, mean_sum, se_sum, treat, ORDER)
}
return_class = new("lipidSummary",
treatSummary = treatsum,
groupSummary = groupsum,
grouping = grouping,
statistic = statistic,
results = statistic_df,
regions = region_order,
colours = colour_pal,
xvariable = ifelse(statistic == 'response', 'REGION', 'treat'),
xorder = if(statistic == 'response') region_order else xaxis_order,
yvariable = if(statistic == 'response') "diff" else if(statistic=='percentage') "percent" else "mean_sum",
ytitle = if(statistic != 'percentage') expression(paste(mu, "mol/mg tissue")) else expression("% total FFA")
)
return(return_class)
}
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP', 'CP')
)
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidsum
lipidPlot(lipidsum)
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP')
)
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP')
)
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
lipidPlot = function(object){
add_scale = function(scaling_factor=1.35){
if (object@yvariable == "mean_sum"){
ymin = 0; ymax = max(object@treatSummary$mean_sum) * scaling_factor
scale_y_continuous(expand = c(0, 0), limits = c(0,ymax))
} else if (object@yvariable == "diff"){
scale_y_continuous()
} else if (object@yvariable == "percent"){
scale_y_continuous(expand = c(0, 0),limits = c(0, 1))
}
}
add_errorbars = function(){
geom_errorbar(
data = object@treatSummary,
aes(ymin = mean_sum - se_sum, ymax = mean_sum + se_sum),
width = 0.3,
size = 0.5)
}
add_lines = function(){
len = length(object@groupSummary$treat %>% unique)
if(len%%2 == 0){
lapply(seq(len/6 + 0.5, len*2 + 0.5, len*2 / 12),
function(x) geom_vline(aes(xintercept=x), linetype=2, alpha=0.2) )
} else {
return(NULL)
}
}
add_statistics = function(){
if(length(object@treatSummary$TREATMENT %>% unique) == 2){
(object@treatSummary %>%
group_by(REGION) %>%
filter(mean_sum == max(mean_sum)) %>%
left_join(object@results, by = 'REGION') %>%
cbind(xposition = seq(1, nrow(object@treatSummary),2)) %>%
dplyr::mutate(geom = map2(xposition, stars, function(i,s) {
yposition = (mean_sum + se_sum)*1.1
list(
geom_path(data = data.frame(x=c(rep(i,2), rep(i+1,2)),
y=c(rep(yposition, 4))),
size = 1,
aes(x=x,y=y)),
annotate("text",
x=xposition + 0.5,
y=yposition + 35,
label=s)
)
})))$geom
} else {
NULL
}
}
saturation_legend = function(position = c(0.9,0.8), justification = c(1,-0.1)){
theme(legend.justification=justification,
legend.position=position,
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
}
generate_plot = function(){
object@treatSummary %>%
ggplot(aes(get(object@xvariable), mean_sum)) +
geom_bar(
data = object@groupSummary,
aes(x = get(object@xvariable), y = get(object@yvariable), fill = reorder(FILL_BY, ORDER)),
stat = "identity"
) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1),
legend.title=element_blank()
) +
labs(x = '', y = object@ytitle) +
scale_x_discrete(limits = object@xorder) +
scale_fill_manual(values = object@colours) +
add_scale() +
{ if(object@yvariable == 'mean_sum'){ # START mean_sum block
if(object@grouping == "CHAIN"){
list(
add_errorbars(),
add_lines()
# add_statistics()
)
} else if (object@grouping == "SATURATION"){
list(
add_scale(),
add_errorbars(),
saturation_legend()
)
}
} else if(object@yvariable == 'diff' & object@grouping == "SATURATION"){
saturation_legend()
}
}
}
return(generate_plot())
}
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP', 'TO')
)
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP', 'TO')
)
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
lipidPlot = function(object){
add_scale = function(scaling_factor=1.35){
if (object@yvariable == "mean_sum"){
ymin = 0; ymax = max(object@treatSummary$mean_sum) * scaling_factor
scale_y_continuous(expand = c(0, 0), limits = c(0,ymax))
} else if (object@yvariable == "diff"){
scale_y_continuous()
} else if (object@yvariable == "percent"){
scale_y_continuous(expand = c(0, 0),limits = c(0, 1))
}
}
add_errorbars = function(){
geom_errorbar(
data = object@treatSummary,
aes(ymin = mean_sum - se_sum, ymax = mean_sum + se_sum),
width = 0.3,
size = 0.5)
}
add_lines = function(){
len = length(object@groupSummary$treat %>% unique)
if(len%%2 == 0){
lapply(seq(len/6 + 0.5, len*2 + 0.5, len*2 / 12),
function(x) geom_vline(aes(xintercept=x), linetype=2, alpha=0.2) )
} else {
return(NULL)
}
}
add_statistics = function(){
if(length(object@treatSummary$TREATMENT %>% unique) == 2){
(object@treatSummary %>%
group_by(REGION) %>%
filter(mean_sum == max(mean_sum)) %>%
left_join(object@results, by = 'REGION') %>%
cbind(xposition = seq(1, nrow(object@treatSummary),2)) %>%
dplyr::mutate(geom = map2(xposition, stars, function(i,s) {
yposition = (mean_sum + se_sum)*1.1
list(
geom_path(data = data.frame(x=c(rep(i,2), rep(i+1,2)),
y=c(rep(yposition, 4))),
size = 1,
aes(x=x,y=y)),
annotate("text",
x=xposition + 0.5,
y=yposition + 35,
label=s)
)
})))$geom
} else {
NULL
}
}
saturation_legend = function(position = c(0.9,0.8), justification = c(1,-0.1)){
theme(legend.justification=justification,
legend.position=position,
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
}
generate_plot = function(){
object@treatSummary %>%
ggplot(aes(get(object@xvariable), mean_sum)) +
geom_bar(
data = object@groupSummary,
aes(x = get(object@xvariable), y = get(object@yvariable), fill = reorder(FILL_BY, ORDER)),
stat = "identity"
) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1),
legend.title=element_blank()
) +
labs(x = '', y = object@ytitle) +
scale_x_discrete(limits = object@xorder) +
scale_fill_manual(values = object@colours) +
add_scale() +
{ if(object@yvariable == 'mean_sum'){ # START mean_sum block
if(object@grouping == "CHAIN"){
list(
add_errorbars(),
add_lines(),
add_statistics()
)
} else if (object@grouping == "SATURATION"){
list(
add_scale(),
add_errorbars(),
saturation_legend()
)
}
} else if(object@yvariable == 'diff' & object@grouping == "SATURATION"){
saturation_legend()
}
}
}
return(generate_plot())
}
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP', 'TO')
)
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP')
)
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidPlot(lipidsum)
plotting_output(treat_groups = c('SU', 'SP', 'TO'))
plotting_output(treat_groups = c('SP', 'SU'), statistic = 'response')
plotting_output(treat_groups = c('SU', 'SP', 'TO'))
plotting_output(treat_groups = c('SP', 'SU'), statistic = 'response')
plotting_output(treat_groups = c('SU', 'SP'))
plotting_output(treat_groups = NULL)
plotting_output = function(treat_groups=NULL, columns, select_chains=NULL, statistic = 'means +/- se'){
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
selected_chains = select_chains,
columns = columns,
treat_groups = treat_groups
)
if(length(treat_groups) == 2 & statistic != 'percentage'){
chainsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = statistic)
saturationsum = summarise_lipids(raw, grouping = 'SATURATION', statistic = statistic)
p1 = lipidPlot(chainsum)
p2 = lipidPlot(saturationsum)
pymin = ggplot_build(p1)$layout$panel_params[[1]]$y.range[1]
pymax = ggplot_build(p1)$layout$panel_params[[1]]$y.range[2]
title = ''
if (statistic == 'means +/- se'){
xmin = 5
xmax = 12.5
ymin = pymax/2
ymax = Inf
position = c(0.9,0.75)
} else if(statistic == 'response'){
xmin = 3.5
xmax = 6.5
ymin = ifelse(abs(pymin)>pymax, -Inf, pymax/2)
ymax = ifelse(abs(pymin)>pymax, pymin/2, Inf)
position = if (abs(pymin)>pymax) c(0.9,0.1) else c(0.9,0.75)
title = paste0(raw@treatments, collapse = '-')
}
plot = p1 +
annotation_custom(
ggplotGrob(p2 + theme(legend.justification=c(1,-0.1), legend.position=position)),
xmin = xmin, xmax = xmax, ymin = ymin , ymax = ymax
)
} else {
chainsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = statistic)
plot = lipidPlot(chainsum)
}
return(plot + ggtitle(title))
}
plotting_output(treat_groups = c('SP', 'SU'), statistic = 'response')
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'response')
plotting_output(treat_groups = NULL, columns = paste0('M', 1:8,''))
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'response')
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'percentage')
lipidPlot(lipidsum)
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'percentage')
plotting_output = function(treat_groups=NULL, columns, select_chains=NULL, statistic = 'means +/- se'){
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
selected_chains = select_chains,
columns = columns,
treat_groups = treat_groups
)
if(length(treat_groups) == 2 & statistic != 'percentage'){
chainsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = statistic)
saturationsum = summarise_lipids(raw, grouping = 'SATURATION', statistic = statistic)
p1 = lipidPlot(chainsum)
p2 = lipidPlot(saturationsum)
pymin = ggplot_build(p1)$layout$panel_params[[1]]$y.range[1]
pymax = ggplot_build(p1)$layout$panel_params[[1]]$y.range[2]
title = ''
if (statistic == 'means +/- se'){
xmin = 5
xmax = 12.5
ymin = pymax/2
ymax = Inf
position = c(0.9,0.75)
} else if(statistic == 'response'){
xmin = 3.5
xmax = 6.5
ymin = ifelse(abs(pymin)>pymax, -Inf, pymax/2)
ymax = ifelse(abs(pymin)>pymax, pymin/2, Inf)
position = if (abs(pymin)>pymax) c(0.9,0.1) else c(0.9,0.75)
title = paste0(raw@treatments, collapse = '-')
}
plot = p1 +
annotation_custom(
ggplotGrob(p2 + theme(legend.justification=c(1,-0.1), legend.position=position)),
xmin = xmin, xmax = xmax, ymin = ymin , ymax = ymax
)
} else {
chainsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = statistic)
plot = lipidPlot(chainsum)
}
return(plot)
}
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'percentage')
plotting_output(treat_groups = NULL, columns = paste0('M', 1:8,''))
plotting_output(treat_groups = NULL, columns = paste0('M', 1:8,''))
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''))
warnings()
install.packages('roxygen2')
library(lipidtools)
lipidPlot
raw = parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP')
)
raw
raw = lipidtools::parse_raw(filename = './Data/ffa_data_processed_combined.tsv',
# selected_chains = c('10:0', '8:0'),
filter_method = 'mf+replacemedian',
columns = paste0('M', 1:8,''),
treat_groups = c('CU','SP')
)
raw
lipidsum = summarise_lipids(raw, grouping = 'CHAIN', statistic = 'means +/- se')
lipidsum
lipidPlot(lipidsum)
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'percentage')
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'response')
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'means +/- se')
lipidPlot(lipidsum)
plotting_output(treat_groups = c('SP', 'SU'), columns = paste0('M', 1:8,''), statistic = 'percentage')
library(devtools)
install.packages('devtools')
library(devtools)
install_github('gitshepard1/lipidtools1')
parse_raw = function(filename,
lipid_class = 'FFA',
selected_chains=NULL,
treat_groups = NULL,
colourfile,
columns,
filter_method = "mf+replacemedian",
filter_cutoff = 2
){
default_settings = read.table(file=filename,
header=T,
stringsAsFactors = F) %>%
distinct(CHAIN, TREATMENT)
chains = if(is.null(selected_chains)) unique(default_settings$CHAIN) else selected_chains
treatments = if(is.null(treat_groups)) unique(default_settings$TREATMENT) else treat_groups
data = read.table(file=filename, header=T, stringsAsFactors = F) %>%
as.tbl() %>%
dplyr::filter(TYPE == lipid_class, CHAIN %in% chains, TREATMENT %in% treatments) %>%
group_by(CHAIN, REGION, TREATMENT) %>%
nest() %>%
dplyr::mutate(data = map(data, function(df) {
reject_outliers(df, method=filter_method, cutoff=filter_cutoff, columns = columns)
})) %>%
unnest(data) %>%
sat_lookup(colourfile = colourfile) %>%
rowwise() %>%
dplyr::mutate(
FILT.MEAN = median(sapply(columns, function(i) get(i))),
FILT.SEM = sd(sapply(columns, function(i) get(i)), na.rm=T)/sqrt(length(columns))
) %>%
arrange(CHAIN, TREATMENT)
"Create class instance"
return_object = new('lipids',
filename = filename,
data = data,
n = length(columns),
chains =  chains,
treatments = treatments,
filter_method = filter_method,
filter_cutoff = filter_cutoff
)
return(return_object)
}
read.csv('./Data/colours.csv')
colours = read.csv('./Data/colours.csv')
save(colours, './data/colours.rda')
save(colours, '/data/colours.rda')
save(colours, '/Data/colours.rda')
save(colours, file = '/data/colours.rda')
save(colours, file = '/Data/colours.rda')
save(colours, file = "./Data/colours.rda")
library(lipidtools)
colours
library(lipidtools)
parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv")
library(lipidtools)
library(lipidtools)
warnings()
file.path('~', 'Desktop')
file.path('~', 'Desktop') %>% dir
file.path('~') %>% dir
dir(C:\Users\Alan\Desktop\QBI)
dir(C:\Users\Alan\Desktop\QBI)
dir("C:\Users\Alan\Desktop\QBI")
dir("C:/Users/Alan/Desktop/QBI")
dir("C:/Users/Alan/Desktop/QBI/"ffa_data_processed_combined.tsv"")
parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv")
parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, ''))
parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
lipidtools::parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
raw = lipidtools::parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
raw
raw@data
library(lipidtools)
raw = lipidtools::parse_raw("C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
library(lipidtools)
plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", treat_groups = c('CU', ' CP'), columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv", treat_groups = c('CU', ' CP'), columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv",
treat_groups = c('CU', 'CP'),
columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv",
treat_groups = c('CU', 'CP'),
columns = paste('M', 1:8, sep = ''))
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv",
treat_groups = c('CU', 'CP'),
columns = paste('M', 1:8, sep = ''))
library(lipidtools)
lipidtools::plotting_output(filename = "C:/Users/Alan/Desktop/QBI/ffa_data_processed_combined.tsv",
treat_groups = c('CU', 'CP'),
columns = paste('M', 1:8, sep = ''))
install_github('GitShepard1/lipidtools')
